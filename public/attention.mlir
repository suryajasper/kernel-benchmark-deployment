// -----// IR Dump After AutoInputConversionPipelinePass (iree-auto-input-conversion) //----- //
#loc9 = loc("<stdin>":30:33)
#loc10 = loc("<stdin>":30:57)
#loc11 = loc("<stdin>":30:81)
#loc12 = loc("<stdin>":30:105)
#loc299 = loc("<stdin>":320:33)
#loc300 = loc("<stdin>":320:64)
#loc301 = loc("<stdin>":320:95)
#loc302 = loc("<stdin>":320:126)
#map = affine_map<()[s0, s1] -> (s0 + s1 * 128 - (s0 floordiv 32) * 32 + (s0 floordiv 64) * 32)>
#map1 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 8)>
#map2 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 8 + 16)>
#map3 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 8 + 32)>
#map4 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 8 + 48)>
#map5 = affine_map<()[s0] -> (s0 * 8 - (s0 floordiv 8) * 64)>
#map6 = affine_map<()[s0] -> ((s0 floordiv 8) mod 32)>
#map7 = affine_map<()[s0] -> (s0 mod 32)>
#map8 = affine_map<()[s0] -> (s0 mod 32 + 32)>
#map9 = affine_map<()[s0, s1] -> (s1 * 32 + (s0 floordiv 8) mod 32)>
#map10 = affine_map<()[s0, s1] -> (s0 * 32 + ((s1 mod 64) floordiv 32) * 4)>
#map11 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4)>
#map12 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 8)>
#map13 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 16)>
#map14 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 24)>
#map15 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 32)>
#map16 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 40)>
#map17 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 48)>
#map18 = affine_map<()[s0] -> (((s0 mod 64) floordiv 32) * 4 + 56)>
#translation = #iree_codegen.translation_info<pipeline = None workgroup_size = [256, 1, 1] subgroup_size = 64>
module attributes {transform.with_named_sequence} {
  stream.executable private @base_attention {
    stream.executable.export public @base_attention workgroups() -> (index, index, index) {
      %c128 = arith.constant 128 : index loc(#loc3)
      %c1 = arith.constant 1 : index loc(#loc4)
      %c8 = arith.constant 8 : index loc(#loc5)
      stream.return %c128, %c1, %c8 : index, index, index loc(#loc6)
    } loc(#loc2)
    builtin.module {
      func.func @base_attention(%arg0: !stream.binding loc("<stdin>":30:33), %arg1: !stream.binding loc("<stdin>":30:57), %arg2: !stream.binding loc("<stdin>":30:81), %arg3: !stream.binding loc("<stdin>":30:105)) attributes {translation_info = #translation} {
        %cst = arith.constant dense<16384> : vector<16xindex> loc(#loc13)
        %cst_0 = arith.constant dense<24> : vector<4xindex> loc(#loc14)
        %cst_1 = arith.constant dense<16> : vector<4xindex> loc(#loc15)
        %cst_2 = arith.constant dense<8> : vector<4xindex> loc(#loc16)
        %c476 = arith.constant 476 : index loc(#loc17)
        %c408 = arith.constant 408 : index loc(#loc18)
        %c340 = arith.constant 340 : index loc(#loc19)
        %c272 = arith.constant 272 : index loc(#loc20)
        %c204 = arith.constant 204 : index loc(#loc21)
        %c136 = arith.constant 136 : index loc(#loc22)
        %cst_3 = arith.constant dense<1.000000e+00> : vector<1xf32> loc(#loc23)
        %c64_i32 = arith.constant 64 : i32 loc(#loc24)
        %c32_i32 = arith.constant 32 : i32 loc(#loc25)
        %cst_4 = arith.constant dense<0> : vector<16xi64> loc(#loc26)
        %cst_5 = arith.constant dense<[0, 1, 2, 3]> : vector<4xindex> loc(#loc27)
        %c1073741822 = arith.constant 1073741822 : index loc(#loc28)
        %c68 = arith.constant 68 : index loc(#loc29)
        %c512 = arith.constant 512 : index loc(#loc30)
        %c1 = arith.constant 1 : index loc(#loc31)
        %c4352 = arith.constant 4352 : index loc(#loc32)
        %c0 = arith.constant 0 : index loc(#loc33)
        %cst_6 = arith.constant dense<-1.000000e+06> : vector<16xf32> loc(#loc34)
        %cst_7 = arith.constant dense<0.180336878> : vector<16xf32> loc(#loc35)
        %cst_8 = arith.constant dense<-1.000000e+06> : vector<1xf32> loc(#loc36)
        %cst_9 = arith.constant dense<0.000000e+00> : vector<1xf32> loc(#loc37)
        %cst_10 = arith.constant dense<0.000000e+00> : vector<16xf32> loc(#loc38)
        %block_id_x = gpu.block_id  x upper_bound 128 loc(#loc39)
        %block_id_z = gpu.block_id  z upper_bound 8 loc(#loc40)
        %thread_id_x = gpu.thread_id  x upper_bound 256 loc(#loc41)
        %alloc = memref.alloc() : memref<8704xi8, #gpu.address_space<workgroup>> loc(#loc42)
        %view = memref.view %alloc[%c0][] : memref<8704xi8, #gpu.address_space<workgroup>> to memref<1x32x68xf16, #gpu.address_space<workgroup>> loc(#loc43)
        %view_11 = memref.view %alloc[%c4352][] : memref<8704xi8, #gpu.address_space<workgroup>> to memref<1x32x68xf16, #gpu.address_space<workgroup>> loc(#loc44)
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>> loc(#loc45)
        %1 = affine.apply #map()[%thread_id_x, %block_id_x] loc(#loc46)
        %2 = affine.apply #map1()[%thread_id_x] loc(#loc47)
        %3 = vector.load %0[%block_id_z, %1, %2] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc48)
        %4 = affine.apply #map2()[%thread_id_x] loc(#loc49)
        %5 = vector.load %0[%block_id_z, %1, %4] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc50)
        %6 = affine.apply #map3()[%thread_id_x] loc(#loc51)
        %7 = vector.load %0[%block_id_z, %1, %6] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc52)
        %8 = affine.apply #map4()[%thread_id_x] loc(#loc53)
        %9 = vector.load %0[%block_id_z, %1, %8] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc54)
        %10 = stream.binding.subspan %arg2[%c0] : !stream.binding -> memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>> loc(#loc55)
        %11 = stream.binding.subspan %arg1[%c0] : !stream.binding -> memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>> loc(#loc56)
        %12 = affine.apply #map5()[%thread_id_x] loc(#loc57)
        %13 = affine.apply #map6()[%thread_id_x] loc(#loc58)
        %14 = affine.apply #map7()[%thread_id_x] loc(#loc59)
        %15 = arith.muli %2, %c68 overflow<nsw> : index loc(#loc60)
        %16 = arith.addi %15, %14 overflow<nsw> : index loc(#loc61)
        %reinterpret_cast = memref.reinterpret_cast %view to offset: [%16], sizes: [%c1073741822], strides: [1] : memref<1x32x68xf16, #gpu.address_space<workgroup>> to memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc62)
        %17 = arith.muli %4, %c68 overflow<nsw> : index loc(#loc63)
        %18 = arith.addi %17, %14 overflow<nsw> : index loc(#loc64)
        %reinterpret_cast_12 = memref.reinterpret_cast %view to offset: [%18], sizes: [%c1073741822], strides: [1] : memref<1x32x68xf16, #gpu.address_space<workgroup>> to memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc65)
        %19 = affine.apply #map8()[%thread_id_x] loc(#loc66)
        %20 = arith.addi %15, %19 overflow<nsw> : index loc(#loc67)
        %reinterpret_cast_13 = memref.reinterpret_cast %view to offset: [%20], sizes: [%c1073741822], strides: [1] : memref<1x32x68xf16, #gpu.address_space<workgroup>> to memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc68)
        %21 = arith.addi %17, %19 overflow<nsw> : index loc(#loc69)
        %reinterpret_cast_14 = memref.reinterpret_cast %view to offset: [%21], sizes: [%c1073741822], strides: [1] : memref<1x32x68xf16, #gpu.address_space<workgroup>> to memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc70)
        %22 = vector.extract_strided_slice %3 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc71)
        %23 = vector.extract_strided_slice %3 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc72)
        %24 = vector.extract_strided_slice %5 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc73)
        %25 = vector.extract_strided_slice %5 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc74)
        %26 = vector.extract_strided_slice %7 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc75)
        %27 = vector.extract_strided_slice %7 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc76)
        %28 = vector.extract_strided_slice %9 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc77)
        %29 = vector.extract_strided_slice %9 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc78)
        %30:4 = scf.for %arg4 = %c0 to %c512 step %c1 iter_args(%arg5 = %cst_8, %arg6 = %cst_9, %arg7 = %cst_10, %arg8 = %cst_10) -> (vector<1xf32>, vector<1xf32>, vector<16xf32>, vector<16xf32>) {
          %53 = affine.apply #map9()[%thread_id_x, %arg4] loc(#loc80)
          %54 = vector.load %11[%block_id_z, %53, %12] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc81)
          amdgpu.lds_barrier loc(#loc82)
          vector.store %54, %view_11[%c0, %13, %12] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc83)
          %55 = vector.load %10[%block_id_z, %53, %12] : memref<8x16384x64xf16, strided<[1048576, 64, 1], offset: ?>>, vector<8xf16> loc(#loc84)
          vector.store %55, %view[%c0, %13, %12] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc85)
          amdgpu.lds_barrier loc(#loc86)
          %56 = memref.load %reinterpret_cast[%c0] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc87)
          %57 = memref.load %reinterpret_cast[%c68] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc88)
          %58 = memref.load %reinterpret_cast[%c136] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc89)
          %59 = memref.load %reinterpret_cast[%c204] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc90)
          %60 = memref.load %reinterpret_cast[%c272] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc91)
          %61 = memref.load %reinterpret_cast[%c340] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc92)
          %62 = memref.load %reinterpret_cast[%c408] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc93)
          %63 = memref.load %reinterpret_cast[%c476] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc94)
          %64 = vector.from_elements %56, %57, %58, %59, %60, %61, %62, %63 : vector<8xf16> loc(#loc95)
          %65 = memref.load %reinterpret_cast_12[%c0] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc96)
          %66 = memref.load %reinterpret_cast_12[%c68] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc97)
          %67 = memref.load %reinterpret_cast_12[%c136] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc98)
          %68 = memref.load %reinterpret_cast_12[%c204] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc99)
          %69 = memref.load %reinterpret_cast_12[%c272] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc100)
          %70 = memref.load %reinterpret_cast_12[%c340] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc101)
          %71 = memref.load %reinterpret_cast_12[%c408] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc102)
          %72 = memref.load %reinterpret_cast_12[%c476] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc103)
          %73 = vector.from_elements %65, %66, %67, %68, %69, %70, %71, %72 : vector<8xf16> loc(#loc104)
          %74 = memref.load %reinterpret_cast_13[%c0] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc105)
          %75 = memref.load %reinterpret_cast_13[%c68] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc106)
          %76 = memref.load %reinterpret_cast_13[%c136] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc107)
          %77 = memref.load %reinterpret_cast_13[%c204] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc108)
          %78 = memref.load %reinterpret_cast_13[%c272] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc109)
          %79 = memref.load %reinterpret_cast_13[%c340] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc110)
          %80 = memref.load %reinterpret_cast_13[%c408] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc111)
          %81 = memref.load %reinterpret_cast_13[%c476] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc112)
          %82 = vector.from_elements %74, %75, %76, %77, %78, %79, %80, %81 : vector<8xf16> loc(#loc113)
          %83 = memref.load %reinterpret_cast_14[%c0] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc114)
          %84 = memref.load %reinterpret_cast_14[%c68] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc115)
          %85 = memref.load %reinterpret_cast_14[%c136] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc116)
          %86 = memref.load %reinterpret_cast_14[%c204] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc117)
          %87 = memref.load %reinterpret_cast_14[%c272] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc118)
          %88 = memref.load %reinterpret_cast_14[%c340] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc119)
          %89 = memref.load %reinterpret_cast_14[%c408] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc120)
          %90 = memref.load %reinterpret_cast_14[%c476] : memref<?xf16, strided<[1], offset: ?>, #gpu.address_space<workgroup>> loc(#loc121)
          %91 = vector.from_elements %83, %84, %85, %86, %87, %88, %89, %90 : vector<8xf16> loc(#loc122)
          %92 = vector.load %view_11[%c0, %14, %2] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc123)
          %93 = vector.load %view_11[%c0, %14, %4] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc124)
          %94 = vector.load %view_11[%c0, %14, %6] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc125)
          %95 = vector.load %view_11[%c0, %14, %8] : memref<1x32x68xf16, #gpu.address_space<workgroup>>, vector<8xf16> loc(#loc126)
          %96 = vector.extract_strided_slice %92 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc127)
          %97 = amdgpu.mfma %96 * %22 + %cst_10 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc128)
          %98 = vector.extract_strided_slice %92 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc129)
          %99 = amdgpu.mfma %98 * %23 + %97 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc130)
          %100 = vector.extract_strided_slice %93 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc131)
          %101 = amdgpu.mfma %100 * %24 + %99 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc132)
          %102 = vector.extract_strided_slice %93 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc133)
          %103 = amdgpu.mfma %102 * %25 + %101 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc134)
          %104 = vector.extract_strided_slice %94 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc135)
          %105 = amdgpu.mfma %104 * %26 + %103 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc136)
          %106 = vector.extract_strided_slice %94 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc137)
          %107 = amdgpu.mfma %106 * %27 + %105 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc138)
          %108 = vector.extract_strided_slice %95 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc139)
          %109 = amdgpu.mfma %108 * %28 + %107 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc140)
          %110 = vector.extract_strided_slice %95 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc141)
          %111 = amdgpu.mfma %110 * %29 + %109 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc142)
          %112 = affine.apply #map10()[%arg4, %thread_id_x] loc(#loc143)
          %113 = vector.splat %112 : vector<4xindex> loc(#loc144)
          %114 = arith.addi %113, %cst_5 overflow<nsw, nuw> : vector<4xindex> loc(#loc145)
          %115 = arith.index_cast %114 : vector<4xindex> to vector<4xi64> loc(#loc146)
          %116 = arith.addi %114, %cst_2 overflow<nsw, nuw> : vector<4xindex> loc(#loc147)
          %117 = arith.index_cast %116 : vector<4xindex> to vector<4xi64> loc(#loc148)
          %118 = arith.addi %114, %cst_1 overflow<nsw, nuw> : vector<4xindex> loc(#loc149)
          %119 = arith.index_cast %118 : vector<4xindex> to vector<4xi64> loc(#loc150)
          %120 = arith.addi %114, %cst_0 overflow<nsw, nuw> : vector<4xindex> loc(#loc151)
          %121 = arith.index_cast %120 : vector<4xindex> to vector<4xi64> loc(#loc152)
          %122 = vector.insert_strided_slice %115, %cst_4 {offsets = [0], strides = [1]} : vector<4xi64> into vector<16xi64> loc(#loc153)
          %123 = vector.insert_strided_slice %117, %122 {offsets = [4], strides = [1]} : vector<4xi64> into vector<16xi64> loc(#loc154)
          %124 = vector.insert_strided_slice %119, %123 {offsets = [8], strides = [1]} : vector<4xi64> into vector<16xi64> loc(#loc155)
          %125 = vector.insert_strided_slice %121, %124 {offsets = [12], strides = [1]} : vector<4xi64> into vector<16xi64> loc(#loc156)
          %126 = arith.index_cast %125 : vector<16xi64> to vector<16xindex> loc(#loc157)
          %127 = arith.cmpi slt, %126, %cst : vector<16xindex> loc(#loc158)
          %128 = arith.select %127, %cst_10, %cst_6 : vector<16xi1>, vector<16xf32> loc(#loc159)
          %129 = arith.addf %111, %128 : vector<16xf32> loc(#loc160)
          %130 = arith.mulf %129, %cst_7 : vector<16xf32> loc(#loc161)
          %131 = vector.extract %130[0] : f32 from vector<16xf32> loc(#loc162)
          %132 = vector.extract %130[1] : f32 from vector<16xf32> loc(#loc163)
          %133 = arith.maximumf %131, %132 : f32 loc(#loc164)
          %134 = vector.extract %130[2] : f32 from vector<16xf32> loc(#loc165)
          %135 = arith.maximumf %133, %134 : f32 loc(#loc166)
          %136 = vector.extract %130[3] : f32 from vector<16xf32> loc(#loc167)
          %137 = arith.maximumf %135, %136 : f32 loc(#loc168)
          %138 = vector.extract %130[4] : f32 from vector<16xf32> loc(#loc169)
          %139 = arith.maximumf %137, %138 : f32 loc(#loc170)
          %140 = vector.extract %130[5] : f32 from vector<16xf32> loc(#loc171)
          %141 = arith.maximumf %139, %140 : f32 loc(#loc172)
          %142 = vector.extract %130[6] : f32 from vector<16xf32> loc(#loc173)
          %143 = arith.maximumf %141, %142 : f32 loc(#loc174)
          %144 = vector.extract %130[7] : f32 from vector<16xf32> loc(#loc175)
          %145 = arith.maximumf %143, %144 : f32 loc(#loc176)
          %146 = vector.extract %130[8] : f32 from vector<16xf32> loc(#loc177)
          %147 = arith.maximumf %145, %146 : f32 loc(#loc178)
          %148 = vector.extract %130[9] : f32 from vector<16xf32> loc(#loc179)
          %149 = arith.maximumf %147, %148 : f32 loc(#loc180)
          %150 = vector.extract %130[10] : f32 from vector<16xf32> loc(#loc181)
          %151 = arith.maximumf %149, %150 : f32 loc(#loc182)
          %152 = vector.extract %130[11] : f32 from vector<16xf32> loc(#loc183)
          %153 = arith.maximumf %151, %152 : f32 loc(#loc184)
          %154 = vector.extract %130[12] : f32 from vector<16xf32> loc(#loc185)
          %155 = arith.maximumf %153, %154 : f32 loc(#loc186)
          %156 = vector.extract %130[13] : f32 from vector<16xf32> loc(#loc187)
          %157 = arith.maximumf %155, %156 : f32 loc(#loc188)
          %158 = vector.extract %130[14] : f32 from vector<16xf32> loc(#loc189)
          %159 = arith.maximumf %157, %158 : f32 loc(#loc190)
          %160 = vector.extract %130[15] : f32 from vector<16xf32> loc(#loc191)
          %161 = arith.maximumf %159, %160 : f32 loc(#loc192)
          %162 = vector.broadcast %161 : f32 to vector<1xf32> loc(#loc193)
          %shuffleResult, %valid = gpu.shuffle  xor %162, %c32_i32, %c64_i32 : vector<1xf32> loc(#loc194)
          %163 = arith.maximumf %162, %shuffleResult : vector<1xf32> loc(#loc195)
          %164 = arith.maximumf %arg5, %163 : vector<1xf32> loc(#loc196)
          %165 = arith.subf %arg5, %164 : vector<1xf32> loc(#loc197)
          %166 = math.exp2 %165 : vector<1xf32> loc(#loc198)
          %167 = vector.extract %164[0] : f32 from vector<1xf32> loc(#loc199)
          %168 = vector.splat %167 : vector<16xf32> loc(#loc200)
          %169 = arith.subf %130, %168 : vector<16xf32> loc(#loc201)
          %170 = math.exp2 %169 : vector<16xf32> loc(#loc202)
          %171 = arith.mulf %arg6, %166 : vector<1xf32> loc(#loc203)
          %172 = vector.extract %170[0] : f32 from vector<16xf32> loc(#loc204)
          %173 = vector.extract %170[1] : f32 from vector<16xf32> loc(#loc205)
          %174 = arith.addf %172, %173 : f32 loc(#loc206)
          %175 = vector.extract %170[2] : f32 from vector<16xf32> loc(#loc207)
          %176 = arith.addf %174, %175 : f32 loc(#loc208)
          %177 = vector.extract %170[3] : f32 from vector<16xf32> loc(#loc209)
          %178 = arith.addf %176, %177 : f32 loc(#loc210)
          %179 = vector.extract %170[4] : f32 from vector<16xf32> loc(#loc211)
          %180 = arith.addf %178, %179 : f32 loc(#loc212)
          %181 = vector.extract %170[5] : f32 from vector<16xf32> loc(#loc213)
          %182 = arith.addf %180, %181 : f32 loc(#loc214)
          %183 = vector.extract %170[6] : f32 from vector<16xf32> loc(#loc215)
          %184 = arith.addf %182, %183 : f32 loc(#loc216)
          %185 = vector.extract %170[7] : f32 from vector<16xf32> loc(#loc217)
          %186 = arith.addf %184, %185 : f32 loc(#loc218)
          %187 = vector.extract %170[8] : f32 from vector<16xf32> loc(#loc219)
          %188 = arith.addf %186, %187 : f32 loc(#loc220)
          %189 = vector.extract %170[9] : f32 from vector<16xf32> loc(#loc221)
          %190 = arith.addf %188, %189 : f32 loc(#loc222)
          %191 = vector.extract %170[10] : f32 from vector<16xf32> loc(#loc223)
          %192 = arith.addf %190, %191 : f32 loc(#loc224)
          %193 = vector.extract %170[11] : f32 from vector<16xf32> loc(#loc225)
          %194 = arith.addf %192, %193 : f32 loc(#loc226)
          %195 = vector.extract %170[12] : f32 from vector<16xf32> loc(#loc227)
          %196 = arith.addf %194, %195 : f32 loc(#loc228)
          %197 = vector.extract %170[13] : f32 from vector<16xf32> loc(#loc229)
          %198 = arith.addf %196, %197 : f32 loc(#loc230)
          %199 = vector.extract %170[14] : f32 from vector<16xf32> loc(#loc231)
          %200 = arith.addf %198, %199 : f32 loc(#loc232)
          %201 = vector.extract %170[15] : f32 from vector<16xf32> loc(#loc233)
          %202 = arith.addf %200, %201 : f32 loc(#loc234)
          %203 = vector.broadcast %202 : f32 to vector<1xf32> loc(#loc235)
          %shuffleResult_15, %valid_16 = gpu.shuffle  xor %203, %c32_i32, %c64_i32 : vector<1xf32> loc(#loc236)
          %204 = arith.addf %203, %shuffleResult_15 : vector<1xf32> loc(#loc237)
          %205 = arith.addf %171, %204 : vector<1xf32> loc(#loc238)
          %206 = arith.truncf %170 : vector<16xf32> to vector<16xf16> loc(#loc239)
          %207 = vector.extract %166[0] : f32 from vector<1xf32> loc(#loc240)
          %208 = vector.splat %207 : vector<16xf32> loc(#loc241)
          %209 = arith.mulf %arg7, %208 : vector<16xf32> loc(#loc242)
          %210 = arith.mulf %arg8, %208 : vector<16xf32> loc(#loc243)
          %211 = vector.extract_strided_slice %206 {offsets = [0], sizes = [8], strides = [1]} : vector<16xf16> to vector<8xf16> loc(#loc244)
          %212 = vector.extract_strided_slice %206 {offsets = [8], sizes = [8], strides = [1]} : vector<16xf16> to vector<8xf16> loc(#loc245)
          %213 = vector.extract_strided_slice %64 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc246)
          %214 = vector.extract_strided_slice %211 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc247)
          %215 = amdgpu.mfma %213 * %214 + %209 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc248)
          %216 = vector.extract_strided_slice %64 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc249)
          %217 = vector.extract_strided_slice %211 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc250)
          %218 = amdgpu.mfma %216 * %217 + %215 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc251)
          %219 = vector.extract_strided_slice %73 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc252)
          %220 = vector.extract_strided_slice %212 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc253)
          %221 = amdgpu.mfma %219 * %220 + %218 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc254)
          %222 = vector.extract_strided_slice %73 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc255)
          %223 = vector.extract_strided_slice %212 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc256)
          %224 = amdgpu.mfma %222 * %223 + %221 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc257)
          %225 = vector.extract_strided_slice %82 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc258)
          %226 = amdgpu.mfma %225 * %214 + %210 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc259)
          %227 = vector.extract_strided_slice %82 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc260)
          %228 = amdgpu.mfma %227 * %217 + %226 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc261)
          %229 = vector.extract_strided_slice %91 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc262)
          %230 = amdgpu.mfma %229 * %220 + %228 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc263)
          %231 = vector.extract_strided_slice %91 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16> loc(#loc264)
          %232 = amdgpu.mfma %231 * %223 + %230 {blocks = 1 : i32, k = 8 : i32, m = 32 : i32, n = 32 : i32} blgp =  none : vector<4xf16>, vector<4xf16>, vector<16xf32> loc(#loc265)
          scf.yield %164, %205, %224, %232 : vector<1xf32>, vector<1xf32>, vector<16xf32>, vector<16xf32> loc(#loc266)
        } loc(#loc79)
        %31 = arith.divf %cst_3, %30#1 : vector<1xf32> loc(#loc267)
        %32 = vector.extract %31[0] : f32 from vector<1xf32> loc(#loc268)
        %33 = vector.splat %32 : vector<16xf32> loc(#loc269)
        %34 = arith.mulf %30#2, %33 : vector<16xf32> loc(#loc270)
        %35 = arith.mulf %30#3, %33 : vector<16xf32> loc(#loc271)
        %36 = vector.extract_strided_slice %34 {offsets = [0], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc272)
        %37 = stream.binding.subspan %arg3[%c0] : !stream.binding -> memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>> loc(#loc273)
        %38 = affine.apply #map11()[%thread_id_x] loc(#loc274)
        vector.store %36, %37[%block_id_z, %1, %38] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc275)
        %39 = vector.extract_strided_slice %34 {offsets = [4], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc276)
        %40 = affine.apply #map12()[%thread_id_x] loc(#loc277)
        vector.store %39, %37[%block_id_z, %1, %40] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc278)
        %41 = vector.extract_strided_slice %34 {offsets = [8], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc279)
        %42 = affine.apply #map13()[%thread_id_x] loc(#loc280)
        vector.store %41, %37[%block_id_z, %1, %42] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc281)
        %43 = vector.extract_strided_slice %34 {offsets = [12], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc282)
        %44 = affine.apply #map14()[%thread_id_x] loc(#loc283)
        vector.store %43, %37[%block_id_z, %1, %44] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc284)
        %45 = vector.extract_strided_slice %35 {offsets = [0], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc285)
        %46 = affine.apply #map15()[%thread_id_x] loc(#loc286)
        vector.store %45, %37[%block_id_z, %1, %46] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc287)
        %47 = vector.extract_strided_slice %35 {offsets = [4], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc288)
        %48 = affine.apply #map16()[%thread_id_x] loc(#loc289)
        vector.store %47, %37[%block_id_z, %1, %48] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc290)
        %49 = vector.extract_strided_slice %35 {offsets = [8], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc291)
        %50 = affine.apply #map17()[%thread_id_x] loc(#loc292)
        vector.store %49, %37[%block_id_z, %1, %50] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc293)
        %51 = vector.extract_strided_slice %35 {offsets = [12], sizes = [4], strides = [1]} : vector<16xf32> to vector<4xf32> loc(#loc294)
        %52 = affine.apply #map18()[%thread_id_x] loc(#loc295)
        vector.store %51, %37[%block_id_z, %1, %52] : memref<8x16384x64xf32, strided<[1048576, 64, 1], offset: ?>>, vector<4xf32> loc(#loc296)
        return loc(#loc297)
      } loc(#loc8)
    } loc(#loc7)
  } loc(#loc1)
  func.func @isolated_benchmark(%arg0: tensor<8x16384x64xf16> loc("<stdin>":320:33), %arg1: tensor<8x16384x64xf16> loc("<stdin>":320:64), %arg2: tensor<8x16384x64xf16> loc("<stdin>":320:95), %arg3: tensor<8x16384x64xf32> loc("<stdin>":320:126)) -> tensor<8x16384x64xf32> {
    %0 = flow.dispatch @base_attention::@base_attention(%arg0, %arg1, %arg2, %arg3) : (tensor<8x16384x64xf16>, tensor<8x16384x64xf16>, tensor<8x16384x64xf16>, tensor<8x16384x64xf32>) -> %arg3 loc(#loc303)
    return %0 : tensor<8x16384x64xf32> loc(#loc304)
  } loc(#loc298)
} loc(#loc)
#loc = loc("<stdin>":21:1)
#loc1 = loc("<stdin>":22:3)
#loc2 = loc("<stdin>":23:5)
#loc3 = loc("<stdin>":24:15)
#loc4 = loc("<stdin>":25:13)
#loc5 = loc("<stdin>":26:13)
#loc6 = loc("<stdin>":27:7)
#loc7 = loc("<stdin>":29:5)
#loc8 = loc("<stdin>":30:7)
#loc13 = loc("<stdin>":31:16)
#loc14 = loc("<stdin>":32:18)
#loc15 = loc("<stdin>":33:18)
#loc16 = loc("<stdin>":34:18)
#loc17 = loc("<stdin>":35:17)
#loc18 = loc("<stdin>":36:17)
#loc19 = loc("<stdin>":37:17)
#loc20 = loc("<stdin>":38:17)
#loc21 = loc("<stdin>":39:17)
#loc22 = loc("<stdin>":40:17)
#loc23 = loc("<stdin>":41:18)
#loc24 = loc("<stdin>":42:20)
#loc25 = loc("<stdin>":43:20)
#loc26 = loc("<stdin>":44:18)
#loc27 = loc("<stdin>":45:18)
#loc28 = loc("<stdin>":46:24)
#loc29 = loc("<stdin>":47:16)
#loc30 = loc("<stdin>":48:17)
#loc31 = loc("<stdin>":49:15)
#loc32 = loc("<stdin>":50:18)
#loc33 = loc("<stdin>":51:15)
#loc34 = loc("<stdin>":52:18)
#loc35 = loc("<stdin>":53:18)
#loc36 = loc("<stdin>":54:18)
#loc37 = loc("<stdin>":55:18)
#loc38 = loc("<stdin>":56:19)
#loc39 = loc("<stdin>":57:23)
#loc40 = loc("<stdin>":58:23)
#loc41 = loc("<stdin>":59:24)
#loc42 = loc("<stdin>":60:18)
#loc43 = loc("<stdin>":61:17)
#loc44 = loc("<stdin>":62:20)
#loc45 = loc("<stdin>":63:14)
#loc46 = loc("<stdin>":64:14)
#loc47 = loc("<stdin>":65:14)
#loc48 = loc("<stdin>":66:14)
#loc49 = loc("<stdin>":67:14)
#loc50 = loc("<stdin>":68:14)
#loc51 = loc("<stdin>":69:14)
#loc52 = loc("<stdin>":70:14)
#loc53 = loc("<stdin>":71:14)
#loc54 = loc("<stdin>":72:14)
#loc55 = loc("<stdin>":73:15)
#loc56 = loc("<stdin>":74:15)
#loc57 = loc("<stdin>":75:15)
#loc58 = loc("<stdin>":76:15)
#loc59 = loc("<stdin>":77:15)
#loc60 = loc("<stdin>":78:15)
#loc61 = loc("<stdin>":79:15)
#loc62 = loc("<stdin>":80:29)
#loc63 = loc("<stdin>":81:15)
#loc64 = loc("<stdin>":82:15)
#loc65 = loc("<stdin>":83:32)
#loc66 = loc("<stdin>":84:15)
#loc67 = loc("<stdin>":85:15)
#loc68 = loc("<stdin>":86:32)
#loc69 = loc("<stdin>":87:15)
#loc70 = loc("<stdin>":88:32)
#loc71 = loc("<stdin>":89:15)
#loc72 = loc("<stdin>":90:15)
#loc73 = loc("<stdin>":91:15)
#loc74 = loc("<stdin>":92:15)
#loc75 = loc("<stdin>":93:15)
#loc76 = loc("<stdin>":94:15)
#loc77 = loc("<stdin>":95:15)
#loc78 = loc("<stdin>":96:15)
#loc79 = loc("<stdin>":97:17)
#loc80 = loc("<stdin>":98:17)
#loc81 = loc("<stdin>":99:17)
#loc82 = loc("<stdin>":100:11)
#loc83 = loc("<stdin>":101:11)
#loc84 = loc("<stdin>":102:17)
#loc85 = loc("<stdin>":103:11)
#loc86 = loc("<stdin>":104:11)
#loc87 = loc("<stdin>":105:17)
#loc88 = loc("<stdin>":106:17)
#loc89 = loc("<stdin>":107:17)
#loc90 = loc("<stdin>":108:17)
#loc91 = loc("<stdin>":109:17)
#loc92 = loc("<stdin>":110:17)
#loc93 = loc("<stdin>":111:17)
#loc94 = loc("<stdin>":112:17)
#loc95 = loc("<stdin>":113:17)
#loc96 = loc("<stdin>":114:17)
#loc97 = loc("<stdin>":115:17)
#loc98 = loc("<stdin>":116:17)
#loc99 = loc("<stdin>":117:17)
#loc100 = loc("<stdin>":118:17)
#loc101 = loc("<stdin>":119:17)
#loc102 = loc("<stdin>":120:17)
#loc103 = loc("<stdin>":121:17)
#loc104 = loc("<stdin>":122:17)
#loc105 = loc("<stdin>":123:17)
#loc106 = loc("<stdin>":124:17)
#loc107 = loc("<stdin>":125:17)
#loc108 = loc("<stdin>":126:17)
#loc109 = loc("<stdin>":127:17)
#loc110 = loc("<stdin>":128:17)
#loc111 = loc("<stdin>":129:17)
#loc112 = loc("<stdin>":130:17)
#loc113 = loc("<stdin>":131:17)
#loc114 = loc("<stdin>":132:17)
#loc115 = loc("<stdin>":133:17)
#loc116 = loc("<stdin>":134:17)
#loc117 = loc("<stdin>":135:17)
#loc118 = loc("<stdin>":136:17)
#loc119 = loc("<stdin>":137:17)
#loc120 = loc("<stdin>":138:17)
#loc121 = loc("<stdin>":139:17)
#loc122 = loc("<stdin>":140:17)
#loc123 = loc("<stdin>":141:17)
#loc124 = loc("<stdin>":142:17)
#loc125 = loc("<stdin>":143:17)
#loc126 = loc("<stdin>":144:17)
#loc127 = loc("<stdin>":145:17)
#loc128 = loc("<stdin>":146:17)
#loc129 = loc("<stdin>":147:17)
#loc130 = loc("<stdin>":148:17)
#loc131 = loc("<stdin>":149:18)
#loc132 = loc("<stdin>":150:18)
#loc133 = loc("<stdin>":151:18)
#loc134 = loc("<stdin>":152:18)
#loc135 = loc("<stdin>":153:18)
#loc136 = loc("<stdin>":154:18)
#loc137 = loc("<stdin>":155:18)
#loc138 = loc("<stdin>":156:18)
#loc139 = loc("<stdin>":157:18)
#loc140 = loc("<stdin>":158:18)
#loc141 = loc("<stdin>":159:18)
#loc142 = loc("<stdin>":160:18)
#loc143 = loc("<stdin>":161:18)
#loc144 = loc("<stdin>":162:18)
#loc145 = loc("<stdin>":163:18)
#loc146 = loc("<stdin>":164:18)
#loc147 = loc("<stdin>":165:18)
#loc148 = loc("<stdin>":166:18)
#loc149 = loc("<stdin>":167:18)
#loc150 = loc("<stdin>":168:18)
#loc151 = loc("<stdin>":169:18)
#loc152 = loc("<stdin>":170:18)
#loc153 = loc("<stdin>":171:18)
#loc154 = loc("<stdin>":172:18)
#loc155 = loc("<stdin>":173:18)
#loc156 = loc("<stdin>":174:18)
#loc157 = loc("<stdin>":175:18)
#loc158 = loc("<stdin>":176:18)
#loc159 = loc("<stdin>":177:18)
#loc160 = loc("<stdin>":178:18)
#loc161 = loc("<stdin>":179:18)
#loc162 = loc("<stdin>":180:18)
#loc163 = loc("<stdin>":181:18)
#loc164 = loc("<stdin>":182:18)
#loc165 = loc("<stdin>":183:18)
#loc166 = loc("<stdin>":184:18)
#loc167 = loc("<stdin>":185:18)
#loc168 = loc("<stdin>":186:18)
#loc169 = loc("<stdin>":187:18)
#loc170 = loc("<stdin>":188:18)
#loc171 = loc("<stdin>":189:18)
#loc172 = loc("<stdin>":190:18)
#loc173 = loc("<stdin>":191:18)
#loc174 = loc("<stdin>":192:18)
#loc175 = loc("<stdin>":193:18)
#loc176 = loc("<stdin>":194:18)
#loc177 = loc("<stdin>":195:18)
#loc178 = loc("<stdin>":196:18)
#loc179 = loc("<stdin>":197:18)
#loc180 = loc("<stdin>":198:18)
#loc181 = loc("<stdin>":199:18)
#loc182 = loc("<stdin>":200:18)
#loc183 = loc("<stdin>":201:18)
#loc184 = loc("<stdin>":202:18)
#loc185 = loc("<stdin>":203:18)
#loc186 = loc("<stdin>":204:18)
#loc187 = loc("<stdin>":205:18)
#loc188 = loc("<stdin>":206:18)
#loc189 = loc("<stdin>":207:18)
#loc190 = loc("<stdin>":208:18)
#loc191 = loc("<stdin>":209:18)
#loc192 = loc("<stdin>":210:18)
#loc193 = loc("<stdin>":211:18)
#loc194 = loc("<stdin>":212:36)
#loc195 = loc("<stdin>":213:18)
#loc196 = loc("<stdin>":214:18)
#loc197 = loc("<stdin>":215:18)
#loc198 = loc("<stdin>":216:18)
#loc199 = loc("<stdin>":217:18)
#loc200 = loc("<stdin>":218:18)
#loc201 = loc("<stdin>":219:18)
#loc202 = loc("<stdin>":220:18)
#loc203 = loc("<stdin>":221:18)
#loc204 = loc("<stdin>":222:18)
#loc205 = loc("<stdin>":223:18)
#loc206 = loc("<stdin>":224:18)
#loc207 = loc("<stdin>":225:18)
#loc208 = loc("<stdin>":226:18)
#loc209 = loc("<stdin>":227:18)
#loc210 = loc("<stdin>":228:18)
#loc211 = loc("<stdin>":229:18)
#loc212 = loc("<stdin>":230:18)
#loc213 = loc("<stdin>":231:18)
#loc214 = loc("<stdin>":232:18)
#loc215 = loc("<stdin>":233:18)
#loc216 = loc("<stdin>":234:18)
#loc217 = loc("<stdin>":235:18)
#loc218 = loc("<stdin>":236:18)
#loc219 = loc("<stdin>":237:18)
#loc220 = loc("<stdin>":238:18)
#loc221 = loc("<stdin>":239:18)
#loc222 = loc("<stdin>":240:18)
#loc223 = loc("<stdin>":241:18)
#loc224 = loc("<stdin>":242:18)
#loc225 = loc("<stdin>":243:18)
#loc226 = loc("<stdin>":244:18)
#loc227 = loc("<stdin>":245:18)
#loc228 = loc("<stdin>":246:18)
#loc229 = loc("<stdin>":247:18)
#loc230 = loc("<stdin>":248:18)
#loc231 = loc("<stdin>":249:18)
#loc232 = loc("<stdin>":250:18)
#loc233 = loc("<stdin>":251:18)
#loc234 = loc("<stdin>":252:18)
#loc235 = loc("<stdin>":253:18)
#loc236 = loc("<stdin>":254:42)
#loc237 = loc("<stdin>":255:18)
#loc238 = loc("<stdin>":256:18)
#loc239 = loc("<stdin>":257:18)
#loc240 = loc("<stdin>":258:18)
#loc241 = loc("<stdin>":259:18)
#loc242 = loc("<stdin>":260:18)
#loc243 = loc("<stdin>":261:18)
#loc244 = loc("<stdin>":262:18)
#loc245 = loc("<stdin>":263:18)
#loc246 = loc("<stdin>":264:18)
#loc247 = loc("<stdin>":265:18)
#loc248 = loc("<stdin>":266:18)
#loc249 = loc("<stdin>":267:18)
#loc250 = loc("<stdin>":268:18)
#loc251 = loc("<stdin>":269:18)
#loc252 = loc("<stdin>":270:18)
#loc253 = loc("<stdin>":271:18)
#loc254 = loc("<stdin>":272:18)
#loc255 = loc("<stdin>":273:18)
#loc256 = loc("<stdin>":274:18)
#loc257 = loc("<stdin>":275:18)
#loc258 = loc("<stdin>":276:18)
#loc259 = loc("<stdin>":277:18)
#loc260 = loc("<stdin>":278:18)
#loc261 = loc("<stdin>":279:18)
#loc262 = loc("<stdin>":280:18)
#loc263 = loc("<stdin>":281:18)
#loc264 = loc("<stdin>":282:18)
#loc265 = loc("<stdin>":283:18)
#loc266 = loc("<stdin>":284:11)
#loc267 = loc("<stdin>":286:15)
#loc268 = loc("<stdin>":287:15)
#loc269 = loc("<stdin>":288:15)
#loc270 = loc("<stdin>":289:15)
#loc271 = loc("<stdin>":290:15)
#loc272 = loc("<stdin>":291:15)
#loc273 = loc("<stdin>":292:15)
#loc274 = loc("<stdin>":293:15)
#loc275 = loc("<stdin>":294:9)
#loc276 = loc("<stdin>":295:15)
#loc277 = loc("<stdin>":296:15)
#loc278 = loc("<stdin>":297:9)
#loc279 = loc("<stdin>":298:15)
#loc280 = loc("<stdin>":299:15)
#loc281 = loc("<stdin>":300:9)
#loc282 = loc("<stdin>":301:15)
#loc283 = loc("<stdin>":302:15)
#loc284 = loc("<stdin>":303:9)
#loc285 = loc("<stdin>":304:15)
#loc286 = loc("<stdin>":305:15)
#loc287 = loc("<stdin>":306:9)
#loc288 = loc("<stdin>":307:15)
#loc289 = loc("<stdin>":308:15)
#loc290 = loc("<stdin>":309:9)
#loc291 = loc("<stdin>":310:15)
#loc292 = loc("<stdin>":311:15)
#loc293 = loc("<stdin>":312:9)
#loc294 = loc("<stdin>":313:15)
#loc295 = loc("<stdin>":314:15)
#loc296 = loc("<stdin>":315:9)
#loc297 = loc("<stdin>":316:9)
#loc298 = loc("<stdin>":320:3)
#loc303 = loc("<stdin>":321:10)
#loc304 = loc("<stdin>":322:5)

// -----// IR Dump After Inliner (inline) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hip_D4702F10783C83D9 {alignment = 1 : i64} "hip" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format" loc(fused["<stdin>":21:1, "<stdin>":22:3])
  vm.rodata private @_utf8_rocm_hsaco_fb_7808ACED606BE52 {alignment = 1 : i64} "rocm-hsaco-fb" loc(fused["<stdin>":21:1, "<stdin>":22:3, callsite("<stdin>":321:10 at "<stdin>":320:3)])
  vm.rodata private @base_attention_rocm_hsaco_fb {alignment = 16 : i64} dense<""> : vector<8944xi8> loc("<stdin>":22:3)
  vm.global.ref private mutable @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.func private @__isolated_benchmark_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13 loc(unknown)
    %c28 = vm.const.i32 28 loc(unknown)
    %c2 = vm.const.i32 2 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer> loc(unknown)
    %c8 = vm.const.i32 8 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c128 = vm.const.i32 128 loc(unknown)
    %c4 = vm.const.i32 4 loc(unknown)
    %c3 = vm.const.i32 3 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %__device_0_executable_0_base_attention = vm.global.load.ref @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_base_attention, %zero, %c128, %c1, %c8, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c16777216), (%zero, %c1, %null, %zero_0, %c16777216), (%zero, %c2, %null, %zero_0, %c16777216), (%zero, %c3, %null, %zero_0, %c33554432)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_0) : (!vm.ref<!hal.command_buffer>, i32, i32, i64) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return %ref : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.global.ref private mutable @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) loc("-":66:1)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects} loc("-":130:1)
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) loc("-":141:1)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects} loc("-":150:1)
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 6 : i32} loc("-":222:1)
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) loc("-":235:1)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i64) loc("-":253:1)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc("-":331:1)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects} loc("-":365:1)
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects} loc("-":371:1)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %flags : i64, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc("-":499:1)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects} loc("-":522:1)
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects} loc("-":525:1)
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects} loc("-":533:1)
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i64) -> !vm.ref<!hal.fence> loc("-":547:1)
  vm.import private @hal.fence.await(%timeout_millis : i32, %flags : i64, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield} loc("-":579:1)
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0" loc("<stdin>":320:3)
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input3_E8711996CCB120E5 {alignment = 1 : i64} "input3" loc("<stdin>":320:3)
  vm.func private @isolated_benchmark(%arg0: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg1: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg2: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg3: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} {
    %c553648160 = vm.const.i32 553648160 loc(unknown)
    %c3075 = vm.const.i32 3075 loc(unknown)
    %c16 = vm.const.i32 16 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c553648144 = vm.const.i32 553648144 loc(unknown)
    %c8 = vm.const.i64 8 loc(unknown)
    %c16384 = vm.const.i64 16384 loc(unknown)
    %c64 = vm.const.i64 64 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %zero = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.fence> loc(unknown)
    %c-1_0 = vm.const.i32 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc("<stdin>":320:3)
    %__isolated_benchmark_memoize_result_0_device_0 = vm.global.load.ref @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    %ref_1 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> loc("<stdin>":320:3)
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_2 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_2, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_3 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_3, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input3_E8711996CCB120E5 = vm.const.ref.rodata @_utf8_input3_E8711996CCB120E5 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg3, %_utf8_input3_E8711996CCB120E5, %c553648160, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg3) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c33554432, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %ref_5 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i64) -> !vm.ref<!hal.fence> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %null, %ref_5, %__isolated_benchmark_memoize_result_0_device_0, %zero, [(%ref, %zero, %c16777216), (%ref_2, %zero, %c16777216), (%ref_3, %zero, %c16777216), (%ref_4, %zero, %c33554432)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, i64, tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %0 = vm.call.variadic @hal.fence.await(%c-1_0, %zero, [%ref_5]) : (i32, i64, !vm.ref<!hal.fence> ...) -> i32 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.cond_br %0, ^bb2, ^bb1 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb1:  // pred: ^bb0
    %ref_6 = vm.call.variadic @hal.buffer_view.create(%ref_4, %zero, %c33554432, %c553648160, %c1, [%c8, %c16384, %c64]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
    vm.return %ref_6 : !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc("<stdin>":320:3)
  vm.export @isolated_benchmark attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} loc("<stdin>":320:3)
  vm.export @__init loc(unknown)
  vm.func private @__init() {
    %c1 = vm.const.i32 1 loc(unknown)
    %null = vm.const.ref.zero : !vm.buffer loc(unknown)
    %c14 = vm.const.i32 14 loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %c18 = vm.const.i32 18 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c1_1 = vm.const.i64 1 loc("<stdin>":21:1)
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device> loc(unknown)
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32 loc("<stdin>":21:1)
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64 loc("<stdin>":21:1)
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb1(%2: i64 loc("<stdin>":21:1), %3: i64 loc("<stdin>":21:1), %4: !vm.ref<!hal.device> loc("<stdin>":21:1)):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %5 = vm.xor.i32 %rnz, %c1 : i32 loc("<stdin>":21:1)
    %slt = vm.cmp.lt.i64.s %2, %1 : i64 loc("<stdin>":21:1)
    %6 = vm.and.i32 %5, %slt : i32 loc("<stdin>":21:1)
    vm.cond_br %6, ^bb2, ^bb5 loc("<stdin>":21:1)
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32 loc("<stdin>":21:1)
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device> loc("<stdin>":21:1)
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_hip_D4702F10783C83D9 = vm.const.ref.rodata @_utf8_hip_D4702F10783C83D9 : !vm.buffer loc("<stdin>":21:1)
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_hip_D4702F10783C83D9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz = vm.cmp.nz.i64 %8#1 : i64 loc("<stdin>":21:1)
    %9 = vm.select.i32 %8#0, %nz, %zero : i32 loc("<stdin>":21:1)
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32) loc("<stdin>":21:1)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":21:1)
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_rocm_hsaco_fb_7808ACED606BE52) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64 loc("<stdin>":21:1)
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32 loc("<stdin>":21:1)
    vm.br ^bb4(%11 : i32) loc("<stdin>":21:1)
  ^bb4(%12: i32 loc("<stdin>":21:1)):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64 loc("<stdin>":21:1)
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64 loc("<stdin>":21:1)
    %14 = vm.add.i64 %3, %13 : i64 loc("<stdin>":21:1)
    %15 = vm.and.i32 %12, %eq : i32 loc("<stdin>":21:1)
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %16 = vm.add.i64 %2, %c1_1 : i64 loc("<stdin>":21:1)
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7 loc("<stdin>":21:1)
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22hip\22, [#hal.executable.target<\22rocm\22, \22rocm-hsaco-fb\22, {abi = \22hip\22, iree.gpu.target = #iree_gpu.target<arch = \22gfx942\22, features = \22\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<MFMA_F32_16x16x16_BF16>, <MFMA_F32_32x32x8_BF16>, <MFMA_F32_16x16x32_F8E5M2FNUZ>, <MFMA_F32_16x16x32_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_I32_16x16x32_I8>, <MFMA_I32_32x32x16_I8>, <MFMA_F64_16x16x4_F64>, <MFMA_F32_16x16x4_F32>, <MFMA_F32_16x16x16_F16>, <MFMA_F32_32x32x8_F16>], subgroup_size_choices = [64], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 65536, max_workgroup_counts = [2147483647, 2147483647, 2147483647], max_load_instruction_bits = 128, simds_per_wgp = 4, vgpr_space_bits = 16384>>, iree_codegen.default_tuning_spec = #rocm.builtin.tuning_module<\22iree_default_tuning_spec_gfx942.mlir\22>, ukernels = \22none\22}>]>" loc("<stdin>":21:1)
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":22:3)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52_6 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":22:3)
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":22:3)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64 loc("<stdin>":22:3)
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32 loc("<stdin>":22:3)
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    vm.cond_br %eq_8, ^bb8, ^bb9 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb8:  // pred: ^bb7
    %base_attention_rocm_hsaco_fb = vm.const.ref.rodata @base_attention_rocm_hsaco_fb : !vm.buffer loc("<stdin>":22:3)
    %ref_9 = vm.call @hal.executable.create(%4, %c-1, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6, %base_attention_rocm_hsaco_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, i64, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_9, @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref_10 = vm.call @__isolated_benchmark_memoize_apply() : () -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_10, @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return loc(unknown)
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `base_attention`; available formats: [rocm-hsaco-fb]" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(unknown)
} loc("<stdin>":21:1)

// -----// IR Dump After CSE (cse) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hip_D4702F10783C83D9 {alignment = 1 : i64} "hip" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format" loc(fused["<stdin>":21:1, "<stdin>":22:3])
  vm.rodata private @_utf8_rocm_hsaco_fb_7808ACED606BE52 {alignment = 1 : i64} "rocm-hsaco-fb" loc(fused["<stdin>":21:1, "<stdin>":22:3, callsite("<stdin>":321:10 at "<stdin>":320:3)])
  vm.rodata private @base_attention_rocm_hsaco_fb {alignment = 16 : i64} dense<"0xvector<8944xi8> loc("<stdin>":22:3)
  vm.global.ref private mutable @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.func private @__isolated_benchmark_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13 loc(unknown)
    %c28 = vm.const.i32 28 loc(unknown)
    %c2 = vm.const.i32 2 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer> loc(unknown)
    %c8 = vm.const.i32 8 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c128 = vm.const.i32 128 loc(unknown)
    %c4 = vm.const.i32 4 loc(unknown)
    %c3 = vm.const.i32 3 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %__device_0_executable_0_base_attention = vm.global.load.ref @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_base_attention, %zero, %c128, %c1, %c8, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c16777216), (%zero, %c1, %null, %zero_0, %c16777216), (%zero, %c2, %null, %zero_0, %c16777216), (%zero, %c3, %null, %zero_0, %c33554432)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_0) : (!vm.ref<!hal.command_buffer>, i32, i32, i64) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return %ref : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.global.ref private mutable @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) loc("-":66:1)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects} loc("-":130:1)
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) loc("-":141:1)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects} loc("-":150:1)
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 6 : i32} loc("-":222:1)
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) loc("-":235:1)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i64) loc("-":253:1)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc("-":331:1)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects} loc("-":365:1)
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects} loc("-":371:1)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %flags : i64, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc("-":499:1)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects} loc("-":522:1)
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects} loc("-":525:1)
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects} loc("-":533:1)
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i64) -> !vm.ref<!hal.fence> loc("-":547:1)
  vm.import private @hal.fence.await(%timeout_millis : i32, %flags : i64, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield} loc("-":579:1)
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0" loc("<stdin>":320:3)
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input3_E8711996CCB120E5 {alignment = 1 : i64} "input3" loc("<stdin>":320:3)
  vm.func private @isolated_benchmark(%arg0: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg1: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg2: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg3: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} {
    %c553648160 = vm.const.i32 553648160 loc(unknown)
    %c3075 = vm.const.i32 3075 loc(unknown)
    %c16 = vm.const.i32 16 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c553648144 = vm.const.i32 553648144 loc(unknown)
    %c8 = vm.const.i64 8 loc(unknown)
    %c16384 = vm.const.i64 16384 loc(unknown)
    %c64 = vm.const.i64 64 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %zero = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.fence> loc(unknown)
    %c-1_0 = vm.const.i32 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc("<stdin>":320:3)
    %__isolated_benchmark_memoize_result_0_device_0 = vm.global.load.ref @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    %ref_1 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> loc("<stdin>":320:3)
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_2 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_2, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_3 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_3, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input3_E8711996CCB120E5 = vm.const.ref.rodata @_utf8_input3_E8711996CCB120E5 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg3, %_utf8_input3_E8711996CCB120E5, %c553648160, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg3) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c33554432, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %ref_5 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i64) -> !vm.ref<!hal.fence> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %null, %ref_5, %__isolated_benchmark_memoize_result_0_device_0, %zero, [(%ref, %zero, %c16777216), (%ref_2, %zero, %c16777216), (%ref_3, %zero, %c16777216), (%ref_4, %zero, %c33554432)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, i64, tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %0 = vm.call.variadic @hal.fence.await(%c-1_0, %zero, [%ref_5]) : (i32, i64, !vm.ref<!hal.fence> ...) -> i32 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.cond_br %0, ^bb2, ^bb1 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb1:  // pred: ^bb0
    %ref_6 = vm.call.variadic @hal.buffer_view.create(%ref_4, %zero, %c33554432, %c553648160, %c1, [%c8, %c16384, %c64]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
    vm.return %ref_6 : !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc("<stdin>":320:3)
  vm.export @isolated_benchmark attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} loc("<stdin>":320:3)
  vm.export @__init loc(unknown)
  vm.func private @__init() {
    %c1 = vm.const.i32 1 loc(unknown)
    %null = vm.const.ref.zero : !vm.buffer loc(unknown)
    %c14 = vm.const.i32 14 loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %c18 = vm.const.i32 18 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c1_1 = vm.const.i64 1 loc("<stdin>":21:1)
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device> loc(unknown)
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32 loc("<stdin>":21:1)
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64 loc("<stdin>":21:1)
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb1(%2: i64 loc("<stdin>":21:1), %3: i64 loc("<stdin>":21:1), %4: !vm.ref<!hal.device> loc("<stdin>":21:1)):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %5 = vm.xor.i32 %rnz, %c1 : i32 loc("<stdin>":21:1)
    %slt = vm.cmp.lt.i64.s %2, %1 : i64 loc("<stdin>":21:1)
    %6 = vm.and.i32 %5, %slt : i32 loc("<stdin>":21:1)
    vm.cond_br %6, ^bb2, ^bb5 loc("<stdin>":21:1)
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32 loc("<stdin>":21:1)
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device> loc("<stdin>":21:1)
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_hip_D4702F10783C83D9 = vm.const.ref.rodata @_utf8_hip_D4702F10783C83D9 : !vm.buffer loc("<stdin>":21:1)
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_hip_D4702F10783C83D9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz = vm.cmp.nz.i64 %8#1 : i64 loc("<stdin>":21:1)
    %9 = vm.select.i32 %8#0, %nz, %zero : i32 loc("<stdin>":21:1)
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32) loc("<stdin>":21:1)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":21:1)
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_rocm_hsaco_fb_7808ACED606BE52) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64 loc("<stdin>":21:1)
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32 loc("<stdin>":21:1)
    vm.br ^bb4(%11 : i32) loc("<stdin>":21:1)
  ^bb4(%12: i32 loc("<stdin>":21:1)):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64 loc("<stdin>":21:1)
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64 loc("<stdin>":21:1)
    %14 = vm.add.i64 %3, %13 : i64 loc("<stdin>":21:1)
    %15 = vm.and.i32 %12, %eq : i32 loc("<stdin>":21:1)
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %16 = vm.add.i64 %2, %c1_1 : i64 loc("<stdin>":21:1)
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7 loc("<stdin>":21:1)
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22hip\22, [#hal.executable.target<\22rocm\22, \22rocm-hsaco-fb\22, {abi = \22hip\22, iree.gpu.target = #iree_gpu.target<arch = \22gfx942\22, features = \22\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<MFMA_F32_16x16x16_BF16>, <MFMA_F32_32x32x8_BF16>, <MFMA_F32_16x16x32_F8E5M2FNUZ>, <MFMA_F32_16x16x32_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_I32_16x16x32_I8>, <MFMA_I32_32x32x16_I8>, <MFMA_F64_16x16x4_F64>, <MFMA_F32_16x16x4_F32>, <MFMA_F32_16x16x16_F16>, <MFMA_F32_32x32x8_F16>], subgroup_size_choices = [64], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 65536, max_workgroup_counts = [2147483647, 2147483647, 2147483647], max_load_instruction_bits = 128, simds_per_wgp = 4, vgpr_space_bits = 16384>>, iree_codegen.default_tuning_spec = #rocm.builtin.tuning_module<\22iree_default_tuning_spec_gfx942.mlir\22>, ukernels = \22none\22}>]>" loc("<stdin>":21:1)
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":22:3)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52_6 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":22:3)
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":22:3)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64 loc("<stdin>":22:3)
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32 loc("<stdin>":22:3)
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    vm.cond_br %eq_8, ^bb8, ^bb9 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb8:  // pred: ^bb7
    %base_attention_rocm_hsaco_fb = vm.const.ref.rodata @base_attention_rocm_hsaco_fb : !vm.buffer loc("<stdin>":22:3)
    %ref_9 = vm.call @hal.executable.create(%4, %c-1, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6, %base_attention_rocm_hsaco_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, i64, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_9, @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref_10 = vm.call @__isolated_benchmark_memoize_apply() : () -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_10, @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return loc(unknown)
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `base_attention`; available formats: [rocm-hsaco-fb]" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(unknown)
} loc("<stdin>":21:1)

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hip_D4702F10783C83D9 {alignment = 1 : i64} "hip" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format" loc(fused["<stdin>":21:1, "<stdin>":22:3])
  vm.rodata private @_utf8_rocm_hsaco_fb_7808ACED606BE52 {alignment = 1 : i64} "rocm-hsaco-fb" loc(fused["<stdin>":21:1, "<stdin>":22:3, callsite("<stdin>":321:10 at "<stdin>":320:3)])
  vm.rodata private @base_attention_rocm_hsaco_fb {alignment = 16 : i64} dense<"vector<8944xi8> loc("<stdin>":22:3)
  vm.global.ref private mutable @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.func private @__isolated_benchmark_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13 loc(unknown)
    %c28 = vm.const.i32 28 loc(unknown)
    %c2 = vm.const.i32 2 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer> loc(unknown)
    %c8 = vm.const.i32 8 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c128 = vm.const.i32 128 loc(unknown)
    %c4 = vm.const.i32 4 loc(unknown)
    %c3 = vm.const.i32 3 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %__device_0_executable_0_base_attention = vm.global.load.ref @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_base_attention, %zero, %c128, %c1, %c8, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c16777216), (%zero, %c1, %null, %zero_0, %c16777216), (%zero, %c2, %null, %zero_0, %c16777216), (%zero, %c3, %null, %zero_0, %c33554432)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_0) : (!vm.ref<!hal.command_buffer>, i32, i32, i64) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return %ref : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.global.ref private mutable @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) loc("-":66:1)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects} loc("-":130:1)
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) loc("-":141:1)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects} loc("-":150:1)
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 6 : i32} loc("-":222:1)
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) loc("-":235:1)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i64) loc("-":253:1)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc("-":331:1)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects} loc("-":365:1)
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects} loc("-":371:1)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %flags : i64, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc("-":499:1)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects} loc("-":522:1)
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects} loc("-":525:1)
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects} loc("-":533:1)
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i64) -> !vm.ref<!hal.fence> loc("-":547:1)
  vm.import private @hal.fence.await(%timeout_millis : i32, %flags : i64, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield} loc("-":579:1)
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0" loc("<stdin>":320:3)
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input3_E8711996CCB120E5 {alignment = 1 : i64} "input3" loc("<stdin>":320:3)
  vm.func private @isolated_benchmark(%arg0: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg1: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg2: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg3: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} {
    %c553648160 = vm.const.i32 553648160 loc(unknown)
    %c3075 = vm.const.i32 3075 loc(unknown)
    %c16 = vm.const.i32 16 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c553648144 = vm.const.i32 553648144 loc(unknown)
    %c8 = vm.const.i64 8 loc(unknown)
    %c16384 = vm.const.i64 16384 loc(unknown)
    %c64 = vm.const.i64 64 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %zero = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.fence> loc(unknown)
    %c-1_0 = vm.const.i32 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc("<stdin>":320:3)
    %__isolated_benchmark_memoize_result_0_device_0 = vm.global.load.ref @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    %ref_1 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> loc("<stdin>":320:3)
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_2 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_2, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_3 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_3, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input3_E8711996CCB120E5 = vm.const.ref.rodata @_utf8_input3_E8711996CCB120E5 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg3, %_utf8_input3_E8711996CCB120E5, %c553648160, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg3) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c33554432, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %ref_5 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i64) -> !vm.ref<!hal.fence> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %null, %ref_5, %__isolated_benchmark_memoize_result_0_device_0, %zero, [(%ref, %zero, %c16777216), (%ref_2, %zero, %c16777216), (%ref_3, %zero, %c16777216), (%ref_4, %zero, %c33554432)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, i64, tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %0 = vm.call.variadic @hal.fence.await(%c-1_0, %zero, [%ref_5]) : (i32, i64, !vm.ref<!hal.fence> ...) -> i32 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.cond_br %0, ^bb2, ^bb1 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb1:  // pred: ^bb0
    %ref_6 = vm.call.variadic @hal.buffer_view.create(%ref_4, %zero, %c33554432, %c553648160, %c1, [%c8, %c16384, %c64]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
    vm.return %ref_6 : !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc("<stdin>":320:3)
  vm.export @isolated_benchmark attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} loc("<stdin>":320:3)
  vm.export @__init loc(unknown)
  vm.func private @__init() {
    %c1 = vm.const.i32 1 loc(unknown)
    %null = vm.const.ref.zero : !vm.buffer loc(unknown)
    %c14 = vm.const.i32 14 loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %c18 = vm.const.i32 18 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c1_1 = vm.const.i64 1 loc("<stdin>":21:1)
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device> loc(unknown)
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32 loc("<stdin>":21:1)
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64 loc("<stdin>":21:1)
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb1(%2: i64 loc("<stdin>":21:1), %3: i64 loc("<stdin>":21:1), %4: !vm.ref<!hal.device> loc("<stdin>":21:1)):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %5 = vm.xor.i32 %rnz, %c1 : i32 loc("<stdin>":21:1)
    %slt = vm.cmp.lt.i64.s %2, %1 : i64 loc("<stdin>":21:1)
    %6 = vm.and.i32 %5, %slt : i32 loc("<stdin>":21:1)
    vm.cond_br %6, ^bb2, ^bb5 loc("<stdin>":21:1)
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32 loc("<stdin>":21:1)
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device> loc("<stdin>":21:1)
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_hip_D4702F10783C83D9 = vm.const.ref.rodata @_utf8_hip_D4702F10783C83D9 : !vm.buffer loc("<stdin>":21:1)
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_hip_D4702F10783C83D9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz = vm.cmp.nz.i64 %8#1 : i64 loc("<stdin>":21:1)
    %9 = vm.select.i32 %8#0, %nz, %zero : i32 loc("<stdin>":21:1)
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32) loc("<stdin>":21:1)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":21:1)
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_rocm_hsaco_fb_7808ACED606BE52) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64 loc("<stdin>":21:1)
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32 loc("<stdin>":21:1)
    vm.br ^bb4(%11 : i32) loc("<stdin>":21:1)
  ^bb4(%12: i32 loc("<stdin>":21:1)):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64 loc("<stdin>":21:1)
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64 loc("<stdin>":21:1)
    %14 = vm.add.i64 %3, %13 : i64 loc("<stdin>":21:1)
    %15 = vm.and.i32 %12, %eq : i32 loc("<stdin>":21:1)
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %16 = vm.add.i64 %2, %c1_1 : i64 loc("<stdin>":21:1)
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7 loc("<stdin>":21:1)
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22hip\22, [#hal.executable.target<\22rocm\22, \22rocm-hsaco-fb\22, {abi = \22hip\22, iree.gpu.target = #iree_gpu.target<arch = \22gfx942\22, features = \22\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<MFMA_F32_16x16x16_BF16>, <MFMA_F32_32x32x8_BF16>, <MFMA_F32_16x16x32_F8E5M2FNUZ>, <MFMA_F32_16x16x32_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_I32_16x16x32_I8>, <MFMA_I32_32x32x16_I8>, <MFMA_F64_16x16x4_F64>, <MFMA_F32_16x16x4_F32>, <MFMA_F32_16x16x16_F16>, <MFMA_F32_32x32x8_F16>], subgroup_size_choices = [64], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 65536, max_workgroup_counts = [2147483647, 2147483647, 2147483647], max_load_instruction_bits = 128, simds_per_wgp = 4, vgpr_space_bits = 16384>>, iree_codegen.default_tuning_spec = #rocm.builtin.tuning_module<\22iree_default_tuning_spec_gfx942.mlir\22>, ukernels = \22none\22}>]>" loc("<stdin>":21:1)
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":22:3)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52_6 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":22:3)
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":22:3)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64 loc("<stdin>":22:3)
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32 loc("<stdin>":22:3)
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    vm.cond_br %eq_8, ^bb8, ^bb9 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb8:  // pred: ^bb7
    %base_attention_rocm_hsaco_fb = vm.const.ref.rodata @base_attention_rocm_hsaco_fb : !vm.buffer loc("<stdin>":22:3)
    %ref_9 = vm.call @hal.executable.create(%4, %c-1, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6, %base_attention_rocm_hsaco_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, i64, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_9, @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref_10 = vm.call @__isolated_benchmark_memoize_apply() : () -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_10, @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return loc(unknown)
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `base_attention`; available formats: [rocm-hsaco-fb]" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(unknown)
} loc("<stdin>":21:1)

// -----// IR Dump After DropCompilerHintsPass (iree-util-drop-compiler-hints) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hip_D4702F10783C83D9 {alignment = 1 : i64} "hip" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format" loc(fused["<stdin>":21:1, "<stdin>":22:3])
  vm.rodata private @_utf8_rocm_hsaco_fb_7808ACED606BE52 {alignment = 1 : i64} "rocm-hsaco-fb" loc(fused["<stdin>":21:1, "<stdin>":22:3, callsite("<stdin>":321:10 at "<stdin>":320:3)])
  vm.rodata private @base_attention_rocm_hsaco_fb {alignment = 16 : i64} dense<"vector<8944xi8> loc("<stdin>":22:3)
  vm.global.ref private mutable @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.func private @__isolated_benchmark_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13 loc(unknown)
    %c28 = vm.const.i32 28 loc(unknown)
    %c2 = vm.const.i32 2 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer> loc(unknown)
    %c8 = vm.const.i32 8 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c128 = vm.const.i32 128 loc(unknown)
    %c4 = vm.const.i32 4 loc(unknown)
    %c3 = vm.const.i32 3 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %__device_0_executable_0_base_attention = vm.global.load.ref @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_base_attention, %zero, %c128, %c1, %c8, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c16777216), (%zero, %c1, %null, %zero_0, %c16777216), (%zero, %c2, %null, %zero_0, %c16777216), (%zero, %c3, %null, %zero_0, %c33554432)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_0) : (!vm.ref<!hal.command_buffer>, i32, i32, i64) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return %ref : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.global.ref private mutable @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) loc("-":66:1)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects} loc("-":130:1)
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) loc("-":141:1)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects} loc("-":150:1)
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 6 : i32} loc("-":222:1)
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) loc("-":235:1)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i64) loc("-":253:1)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc("-":331:1)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects} loc("-":365:1)
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects} loc("-":371:1)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %flags : i64, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc("-":499:1)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects} loc("-":522:1)
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects} loc("-":525:1)
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects} loc("-":533:1)
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i64) -> !vm.ref<!hal.fence> loc("-":547:1)
  vm.import private @hal.fence.await(%timeout_millis : i32, %flags : i64, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield} loc("-":579:1)
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0" loc("<stdin>":320:3)
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input3_E8711996CCB120E5 {alignment = 1 : i64} "input3" loc("<stdin>":320:3)
  vm.func private @isolated_benchmark(%arg0: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg1: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg2: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg3: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} {
    %c553648160 = vm.const.i32 553648160 loc(unknown)
    %c3075 = vm.const.i32 3075 loc(unknown)
    %c16 = vm.const.i32 16 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c553648144 = vm.const.i32 553648144 loc(unknown)
    %c8 = vm.const.i64 8 loc(unknown)
    %c16384 = vm.const.i64 16384 loc(unknown)
    %c64 = vm.const.i64 64 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %zero = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.fence> loc(unknown)
    %c-1_0 = vm.const.i32 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc("<stdin>":320:3)
    %__isolated_benchmark_memoize_result_0_device_0 = vm.global.load.ref @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    %ref_1 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> loc("<stdin>":320:3)
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_2 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_2, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_3 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_3, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input3_E8711996CCB120E5 = vm.const.ref.rodata @_utf8_input3_E8711996CCB120E5 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg3, %_utf8_input3_E8711996CCB120E5, %c553648160, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg3) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c33554432, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %ref_5 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i64) -> !vm.ref<!hal.fence> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %null, %ref_5, %__isolated_benchmark_memoize_result_0_device_0, %zero, [(%ref, %zero, %c16777216), (%ref_2, %zero, %c16777216), (%ref_3, %zero, %c16777216), (%ref_4, %zero, %c33554432)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, i64, tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %0 = vm.call.variadic @hal.fence.await(%c-1_0, %zero, [%ref_5]) : (i32, i64, !vm.ref<!hal.fence> ...) -> i32 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.cond_br %0, ^bb2, ^bb1 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb1:  // pred: ^bb0
    %ref_6 = vm.call.variadic @hal.buffer_view.create(%ref_4, %zero, %c33554432, %c553648160, %c1, [%c8, %c16384, %c64]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
    vm.return %ref_6 : !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc("<stdin>":320:3)
  vm.export @isolated_benchmark attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}} loc("<stdin>":320:3)
  vm.export @__init loc(unknown)
  vm.func private @__init() {
    %c1 = vm.const.i32 1 loc(unknown)
    %null = vm.const.ref.zero : !vm.buffer loc(unknown)
    %c14 = vm.const.i32 14 loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %c18 = vm.const.i32 18 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c1_1 = vm.const.i64 1 loc("<stdin>":21:1)
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device> loc(unknown)
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32 loc("<stdin>":21:1)
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64 loc("<stdin>":21:1)
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb1(%2: i64 loc("<stdin>":21:1), %3: i64 loc("<stdin>":21:1), %4: !vm.ref<!hal.device> loc("<stdin>":21:1)):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %5 = vm.xor.i32 %rnz, %c1 : i32 loc("<stdin>":21:1)
    %slt = vm.cmp.lt.i64.s %2, %1 : i64 loc("<stdin>":21:1)
    %6 = vm.and.i32 %5, %slt : i32 loc("<stdin>":21:1)
    vm.cond_br %6, ^bb2, ^bb5 loc("<stdin>":21:1)
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32 loc("<stdin>":21:1)
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device> loc("<stdin>":21:1)
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_hip_D4702F10783C83D9 = vm.const.ref.rodata @_utf8_hip_D4702F10783C83D9 : !vm.buffer loc("<stdin>":21:1)
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_hip_D4702F10783C83D9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz = vm.cmp.nz.i64 %8#1 : i64 loc("<stdin>":21:1)
    %9 = vm.select.i32 %8#0, %nz, %zero : i32 loc("<stdin>":21:1)
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32) loc("<stdin>":21:1)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":21:1)
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_rocm_hsaco_fb_7808ACED606BE52) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64 loc("<stdin>":21:1)
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32 loc("<stdin>":21:1)
    vm.br ^bb4(%11 : i32) loc("<stdin>":21:1)
  ^bb4(%12: i32 loc("<stdin>":21:1)):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64 loc("<stdin>":21:1)
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64 loc("<stdin>":21:1)
    %14 = vm.add.i64 %3, %13 : i64 loc("<stdin>":21:1)
    %15 = vm.and.i32 %12, %eq : i32 loc("<stdin>":21:1)
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %16 = vm.add.i64 %2, %c1_1 : i64 loc("<stdin>":21:1)
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7 loc("<stdin>":21:1)
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22hip\22, [#hal.executable.target<\22rocm\22, \22rocm-hsaco-fb\22, {abi = \22hip\22, iree.gpu.target = #iree_gpu.target<arch = \22gfx942\22, features = \22\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<MFMA_F32_16x16x16_BF16>, <MFMA_F32_32x32x8_BF16>, <MFMA_F32_16x16x32_F8E5M2FNUZ>, <MFMA_F32_16x16x32_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_I32_16x16x32_I8>, <MFMA_I32_32x32x16_I8>, <MFMA_F64_16x16x4_F64>, <MFMA_F32_16x16x4_F32>, <MFMA_F32_16x16x16_F16>, <MFMA_F32_32x32x8_F16>], subgroup_size_choices = [64], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 65536, max_workgroup_counts = [2147483647, 2147483647, 2147483647], max_load_instruction_bits = 128, simds_per_wgp = 4, vgpr_space_bits = 16384>>, iree_codegen.default_tuning_spec = #rocm.builtin.tuning_module<\22iree_default_tuning_spec_gfx942.mlir\22>, ukernels = \22none\22}>]>" loc("<stdin>":21:1)
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":22:3)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52_6 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":22:3)
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":22:3)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64 loc("<stdin>":22:3)
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32 loc("<stdin>":22:3)
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    vm.cond_br %eq_8, ^bb8, ^bb9 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb8:  // pred: ^bb7
    %base_attention_rocm_hsaco_fb = vm.const.ref.rodata @base_attention_rocm_hsaco_fb : !vm.buffer loc("<stdin>":22:3)
    %ref_9 = vm.call @hal.executable.create(%4, %c-1, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6, %base_attention_rocm_hsaco_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, i64, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_9, @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref_10 = vm.call @__isolated_benchmark_memoize_apply() : () -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_10, @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return loc(unknown)
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `base_attention`; available formats: [rocm-hsaco-fb]" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(unknown)
} loc("<stdin>":21:1)

// -----// IR Dump After OrdinalAllocationPass (iree-vm-ordinal-allocation) //----- //
vm.module public @module attributes {ordinal_counts = #vm.ordinal_counts<import_funcs = 16, export_funcs = 2, internal_funcs = 3, global_bytes = 0, global_refs = 3, rodatas = 10, rwdatas = 0>} {
  vm.global.ref private mutable @__device_0 {ordinal = 0 : i32} : !vm.ref<!hal.device> loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64, ordinal = 0 : i32} "hal.device.id" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hip_D4702F10783C83D9 {alignment = 1 : i64, ordinal = 1 : i32} "hip" loc("<stdin>":21:1)
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64, ordinal = 2 : i32} "hal.executable.format" loc(fused["<stdin>":21:1, "<stdin>":22:3])
  vm.rodata private @_utf8_rocm_hsaco_fb_7808ACED606BE52 {alignment = 1 : i64, ordinal = 3 : i32} "rocm-hsaco-fb" loc(fused["<stdin>":21:1, "<stdin>":22:3, callsite("<stdin>":321:10 at "<stdin>":320:3)])
  vm.rodata private @base_attention_rocm_hsaco_fb {alignment = 16 : i64, ordinal = 4 : i32} dense<"vector<8944xi8> loc("<stdin>":22:3)
  vm.global.ref private mutable @__device_0_executable_0_base_attention {ordinal = 1 : i32} : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.func private @__isolated_benchmark_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never, ordinal = 0 : i32} {
    %c13 = vm.const.i32 13 loc(unknown)
    %c28 = vm.const.i32 28 loc(unknown)
    %c2 = vm.const.i32 2 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer> loc(unknown)
    %c8 = vm.const.i32 8 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c128 = vm.const.i32 128 loc(unknown)
    %c4 = vm.const.i32 4 loc(unknown)
    %c3 = vm.const.i32 3 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %__device_0_executable_0_base_attention = vm.global.load.ref @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_base_attention, %zero, %c128, %c1, %c8, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c16777216), (%zero, %c1, %null, %zero_0, %c16777216), (%zero, %c2, %null, %zero_0, %c16777216), (%zero, %c3, %null, %zero_0, %c33554432)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_0) : (!vm.ref<!hal.command_buffer>, i32, i32, i64) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> () loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return %ref : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.global.ref private mutable @__isolated_benchmark_memoize_result_0_device_0 {ordinal = 2 : i32} : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) attributes {ordinal = 0 : i32} loc("-":66:1)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects, ordinal = 1 : i32} loc("-":130:1)
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) attributes {ordinal = 2 : i32} loc("-":141:1)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects, ordinal = 3 : i32} loc("-":150:1)
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 6 : i32, ordinal = 4 : i32} loc("-":222:1)
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) attributes {ordinal = 5 : i32} loc("-":235:1)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i64) attributes {ordinal = 6 : i32} loc("-":253:1)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) attributes {ordinal = 7 : i32} loc("-":331:1)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects, ordinal = 8 : i32} loc("-":365:1)
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects, ordinal = 9 : i32} loc("-":371:1)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %flags : i64, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) attributes {ordinal = 10 : i32} loc("-":499:1)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects, ordinal = 11 : i32} loc("-":522:1)
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects, ordinal = 12 : i32} loc("-":525:1)
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects, ordinal = 13 : i32} loc("-":533:1)
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i64) -> !vm.ref<!hal.fence> attributes {ordinal = 14 : i32} loc("-":547:1)
  vm.import private @hal.fence.await(%timeout_millis : i32, %flags : i64, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {ordinal = 15 : i32, vm.yield} loc("-":579:1)
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64, ordinal = 5 : i32} "input0" loc("<stdin>":320:3)
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64, ordinal = 6 : i32} "tensor" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64, ordinal = 7 : i32} "input1" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64, ordinal = 8 : i32} "input2" loc("<stdin>":320:3)
  vm.rodata private @_utf8_input3_E8711996CCB120E5 {alignment = 1 : i64, ordinal = 9 : i32} "input3" loc("<stdin>":320:3)
  vm.func private @isolated_benchmark(%arg0: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg1: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg2: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3), %arg3: !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}, ordinal = 1 : i32} {
    %c553648160 = vm.const.i32 553648160 loc(unknown)
    %c3075 = vm.const.i32 3075 loc(unknown)
    %c16 = vm.const.i32 16 loc(unknown)
    %c1 = vm.const.i32 1 loc(unknown)
    %c553648144 = vm.const.i32 553648144 loc(unknown)
    %c8 = vm.const.i64 8 loc(unknown)
    %c16384 = vm.const.i64 16384 loc(unknown)
    %c64 = vm.const.i64 64 loc(unknown)
    %c16777216 = vm.const.i64 16777216 loc(unknown)
    %c33554432 = vm.const.i64 33554432 loc(unknown)
    %zero = vm.const.i64.zero loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %null = vm.const.ref.zero : !vm.ref<!hal.fence> loc(unknown)
    %c-1_0 = vm.const.i32 -1 loc(unknown)
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device> loc("<stdin>":320:3)
    %__isolated_benchmark_memoize_result_0_device_0 = vm.global.load.ref @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    %ref_1 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> loc("<stdin>":320:3)
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_2 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_2, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648144, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_3 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_3, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c16777216, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %_utf8_input3_E8711996CCB120E5 = vm.const.ref.rodata @_utf8_input3_E8711996CCB120E5 : !vm.buffer loc("<stdin>":320:3)
    vm.call.variadic @hal.buffer_view.assert(%arg3, %_utf8_input3_E8711996CCB120E5, %c553648160, %c1, [%c8, %c16384, %c64]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...) loc("<stdin>":320:3)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg3) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> loc("<stdin>":320:3)
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_1, %c33554432, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> () loc("<stdin>":320:3)
    %ref_5 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i64) -> !vm.ref<!hal.fence> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %null, %ref_5, %__isolated_benchmark_memoize_result_0_device_0, %zero, [(%ref, %zero, %c16777216), (%ref_2, %zero, %c16777216), (%ref_3, %zero, %c16777216), (%ref_4, %zero, %c33554432)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, i64, tuple<!vm.ref<!hal.buffer>, i64, i64> ...) loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %0 = vm.call.variadic @hal.fence.await(%c-1_0, %zero, [%ref_5]) : (i32, i64, !vm.ref<!hal.fence> ...) -> i32 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.cond_br %0, ^bb2, ^bb1 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb1:  // pred: ^bb0
    %ref_6 = vm.call.variadic @hal.buffer_view.create(%ref_4, %zero, %c33554432, %c553648160, %c1, [%c8, %c16384, %c64]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
    vm.return %ref_6 : !vm.ref<!hal.buffer_view> loc("<stdin>":320:3)
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc("<stdin>":320:3)
  vm.export @isolated_benchmark attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @isolated_benchmark(%input0: tensor<8x16384x64xf16>, %input1: tensor<8x16384x64xf16>, %input2: tensor<8x16384x64xf16>, %input3: tensor<8x16384x64xf32>) -> (%output0: tensor<8x16384x64xf32>)"}, ordinal = 0 : i32} loc("<stdin>":320:3)
  vm.export @__init attributes {ordinal = 1 : i32} loc(unknown)
  vm.func private @__init() attributes {ordinal = 2 : i32} {
    %c1 = vm.const.i32 1 loc(unknown)
    %null = vm.const.ref.zero : !vm.buffer loc(unknown)
    %c14 = vm.const.i32 14 loc(unknown)
    %c-1 = vm.const.i64 -1 loc(unknown)
    %c18 = vm.const.i32 18 loc(unknown)
    %zero = vm.const.i32.zero loc(unknown)
    %zero_0 = vm.const.i64.zero loc(unknown)
    %c1_1 = vm.const.i64 1 loc("<stdin>":21:1)
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device> loc(unknown)
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32 loc("<stdin>":21:1)
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64 loc("<stdin>":21:1)
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb1(%2: i64 loc("<stdin>":21:1), %3: i64 loc("<stdin>":21:1), %4: !vm.ref<!hal.device> loc("<stdin>":21:1)):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %5 = vm.xor.i32 %rnz, %c1 : i32 loc("<stdin>":21:1)
    %slt = vm.cmp.lt.i64.s %2, %1 : i64 loc("<stdin>":21:1)
    %6 = vm.and.i32 %5, %slt : i32 loc("<stdin>":21:1)
    vm.cond_br %6, ^bb2, ^bb5 loc("<stdin>":21:1)
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32 loc("<stdin>":21:1)
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device> loc("<stdin>":21:1)
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_hip_D4702F10783C83D9 = vm.const.ref.rodata @_utf8_hip_D4702F10783C83D9 : !vm.buffer loc("<stdin>":21:1)
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_hip_D4702F10783C83D9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz = vm.cmp.nz.i64 %8#1 : i64 loc("<stdin>":21:1)
    %9 = vm.select.i32 %8#0, %nz, %zero : i32 loc("<stdin>":21:1)
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32) loc("<stdin>":21:1)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":21:1)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":21:1)
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_rocm_hsaco_fb_7808ACED606BE52) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":21:1)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64 loc("<stdin>":21:1)
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32 loc("<stdin>":21:1)
    vm.br ^bb4(%11 : i32) loc("<stdin>":21:1)
  ^bb4(%12: i32 loc("<stdin>":21:1)):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64 loc("<stdin>":21:1)
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64 loc("<stdin>":21:1)
    %14 = vm.add.i64 %3, %13 : i64 loc("<stdin>":21:1)
    %15 = vm.and.i32 %12, %eq : i32 loc("<stdin>":21:1)
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    %16 = vm.add.i64 %2, %c1_1 : i64 loc("<stdin>":21:1)
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>) loc("<stdin>":21:1)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7 loc("<stdin>":21:1)
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22hip\22, [#hal.executable.target<\22rocm\22, \22rocm-hsaco-fb\22, {abi = \22hip\22, iree.gpu.target = #iree_gpu.target<arch = \22gfx942\22, features = \22\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<MFMA_F32_16x16x16_BF16>, <MFMA_F32_32x32x8_BF16>, <MFMA_F32_16x16x32_F8E5M2FNUZ>, <MFMA_F32_16x16x32_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ>, <MFMA_F32_16x16x32_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ>, <MFMA_F32_32x32x16_F8E5M2FNUZ_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ>, <MFMA_F32_32x32x16_F8E4M3FNUZ_F8E5M2FNUZ>, <MFMA_I32_16x16x32_I8>, <MFMA_I32_32x32x16_I8>, <MFMA_F64_16x16x4_F64>, <MFMA_F32_16x16x4_F32>, <MFMA_F32_16x16x16_F16>, <MFMA_F32_32x32x8_F16>], subgroup_size_choices = [64], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 65536, max_workgroup_counts = [2147483647, 2147483647, 2147483647], max_load_instruction_bits = 128, simds_per_wgp = 4, vgpr_space_bits = 16384>>, iree_codegen.default_tuning_spec = #rocm.builtin.tuning_module<\22iree_default_tuning_spec_gfx942.mlir\22>, ukernels = \22none\22}>]>" loc("<stdin>":21:1)
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer loc("<stdin>":22:3)
    %_utf8_rocm_hsaco_fb_7808ACED606BE52_6 = vm.const.ref.rodata @_utf8_rocm_hsaco_fb_7808ACED606BE52 : !vm.buffer loc("<stdin>":22:3)
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64) loc("<stdin>":22:3)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64 loc("<stdin>":22:3)
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32 loc("<stdin>":22:3)
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device> loc("<stdin>":21:1)
    vm.cond_br %eq_8, ^bb8, ^bb9 loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  ^bb8:  // pred: ^bb7
    %base_attention_rocm_hsaco_fb = vm.const.ref.rodata @base_attention_rocm_hsaco_fb : !vm.buffer loc("<stdin>":22:3)
    %ref_9 = vm.call @hal.executable.create(%4, %c-1, %_utf8_rocm_hsaco_fb_7808ACED606BE52_6, %base_attention_rocm_hsaco_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, i64, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_9, @__device_0_executable_0_base_attention : !vm.ref<!hal.executable> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    %ref_10 = vm.call @__isolated_benchmark_memoize_apply() : () -> !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.global.store.ref %ref_10, @__isolated_benchmark_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer> loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
    vm.return loc(unknown)
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `base_attention`; available formats: [rocm-hsaco-fb]" loc(callsite("<stdin>":321:10 at "<stdin>":320:3))
  } loc(unknown)
} loc("<stdin>":21:1)

